module;
#include <base/Macros.hh>
#include <freetype/freetype.h>
#include <glm/glm.hpp>
#include <hb.h>
#include <memory>
#include <SDL3/SDL_video.h>
#include <unordered_map>
export module pr.client.render;

import pr.utils;
import pr.client.render.gl;

export namespace pr::client {
struct Colour;
struct Size;
struct Position;

class Renderer;
class Font;
class ShapedText;

enum struct FontSize : u8;
} // namespace pr::client

// =============================================================================
//  Utility Types
// =============================================================================
/// To keep font sizes uniform.
enum struct pr::client::FontSize : base::u8 {
    Huge = 96,
};

struct pr::client::Colour {
    u8 r;
    u8 g;
    u8 b;
    u8 a;

    /// Create a new colour.
    constexpr Colour(u8 r, u8 g, u8 b, u8 a = 255) : r(r), g(g), b(b), a(a) {}
    constexpr static auto ABGR(u32 abgr) -> Colour {
        if constexpr (std::endian::native == std::endian::big)
            abgr = std::byteswap(abgr);

        return {
            u8(abgr & 0xFF),
            u8(abgr >> 8 & 0xFF),
            u8(abgr >> 16 & 0xFF),
            u8(abgr >> 24 & 0xFF),
        };
    }

    f32 red() const { return r / 255.0f; }
    f32 green() const { return g / 255.0f; }
    f32 blue() const { return b / 255.0f; }
    f32 alpha() const { return a / 255.0f; }
    auto vec4() const -> glm::vec4 { return {red(), green(), blue(), alpha()}; }

    static constinit const Colour White;
};

constexpr pr::client::Colour pr::client::Colour::White = {255, 255, 255, 255};

struct pr::client::Size {
    i32 wd{};
    i32 ht{};

    Size() = default;
    Size(i32 wd, i32 ht) : wd(wd), ht(ht) {}
};

struct pr::client::Position {
    static constexpr i32 Centered = std::numeric_limits<i32>::min();

    i32 x{};
    i32 y{};

    Position() = default;
    Position(i32 x, i32 y) : x(x), y(y) {}
    Position(Size s) : x(s.wd), y(s.ht) {}
    Position(ivec2 xy) : x(xy.x), y(xy.y) {}

    /// Create a position that is centered horizontally or vertically.
    static auto HCenter(i32 y) -> Position { return {Centered, y}; }
    static auto VCenter(i32 x) -> Position { return {x, Centered}; }
    static auto Center() -> Position { return {Centered, Centered}; }
};

// =============================================================================
//  Text
// =============================================================================
/// Text to be rendered.
class pr::client::ShapedText {
    friend Renderer;
    friend Font;

    VertexArrays vao;
    u32 fsize;
    f32 wd;
    f32 ht;

    explicit ShapedText(VertexArrays vao, u32 fsize, f32 wd, f32 ht)
        : vao(std::move(vao)), fsize(fsize), wd(wd), ht(ht) {}

public:
    /// Debugging function that dumps the contents of a HarfBuzz buffer;
    /// must be called after shaping.
    static auto DumpHBBuffer(hb_font_t* font, hb_buffer_t* buf);

    /// Get the font size.
    auto font_size() const -> u32 { return fsize; }

    /// Get the height of the text.
    auto height() const -> f32 { return ht; }

    /// Get the vertices for this text.
    auto verts() const -> const VertexArrays& { return vao; }

    /// Get the width of the text.
    auto width() const -> f32 { return wd; }
};

/// A fixed-sized font, combined with a HarfBuzz shaper and texture atlas.
class pr::client::Font {
    using HarfBuzzFontHandle = std::unique_ptr<hb_font_t, decltype(&hb_font_destroy)>;
    using HarfBuzzBufferHandle = std::unique_ptr<hb_buffer_t, decltype(&hb_buffer_destroy)>;
    struct Metrics {
        vec2 size;
        vec2 bearing;
    };

    /// HarfBuzz font to use for shaping.
    HarfBuzzFontHandle hb_font = {nullptr, hb_font_destroy};
    HarfBuzzBufferHandle hb_buf = {hb_buffer_create(), hb_buffer_destroy};

    /// Metrics for all glyphs in the font.
    std::vector<Metrics> glyphs{};

    /// The width and height of a cell in the texture atlas.
    u32 atlas_entry_width{};
    u32 atlas_entry_height{};

    /// The number of columns and rows in the texture atlas.
    u32 atlas_columns{};
    u32 atlas_rows{};

    /// The font size.
    u32 size{};

    /// The atlas texture.
    Texture atlas;

public:
    Font() = default;
    Font(FT_Face ft_face, u32 size);

    /// Shape text using this font.
    ///
    /// The resulting object is position-independent and can
    /// be drawn at any coordinates.
    auto shape(std::string_view text) -> ShapedText;

    /// Activate the font for rendering.
    void use() const { atlas.bind(); }

    /// Get the height and width of a cell in the atlas.
    auto cell_height() const -> u32 { return atlas_entry_height; }
    auto cell_width() const -> u32 { return atlas_entry_width; }

    /// Get the number of rows and columns in the atlas.
    auto columns() const -> u32 { return atlas_columns; }
    auto rows() const -> u32 { return atlas_rows; }

    /// Get the total width and height of the atlas.
    auto height() const -> u32 { return atlas_rows * atlas_entry_height; }
    auto width() const -> u32 { return atlas_columns * atlas_entry_width; }
};

// =============================================================================
//  Renderer
// =============================================================================
/// A renderer that renders to a window.
class pr::client::Renderer {
    LIBBASE_IMMOVABLE(Renderer);

    SDL_Window* window;
    SDL_GLContextState* context;

    ShaderProgram identity_shader;
    ShaderProgram text_shader;
    ShaderProgram image_shader;
    FT_Library ft;
    FT_Face ft_face;
    std::unordered_map<u32, Font> fonts_by_size;

public:
    class Frame {
        LIBBASE_IMMOVABLE(Frame);
        Renderer& r;
        friend Renderer;
        explicit Frame(Renderer& r);
    public:
        ~Frame();
    };

    /// Create a new window and renderer.
    Renderer(int initial_wd, int initial_ht);

    /// Clean up resources.
    ~Renderer();

    /// Clear the screen.
    void clear(Colour c = Colour::White);

    /// Draw text at a position in world coordinates.
    ///
    /// 'x' and 'y' can be PositionCentered, which will center the text
    /// horizontally or vertically, respectively.
    void draw_text(const ShapedText& text, Position pos, Colour c = Colour::White);

    /// Draw a texture at a position in world coordinates.
    void draw_texture(const DrawableTexture& tex, Position pos);

    /// Start a new frame.
    auto frame() -> Frame;

    /// Create a text object that can be drawn.
    auto make_text(std::string_view text, FontSize size) -> ShapedText;

    /// Get the size of the window.
    auto size() -> Size;

private:
    /// Convert a position to absolute coordinates.
    auto absolute(Position pos, i32 obj_wd, i32 obj_ht) -> Size;

    /// Get a font of a given size.
    auto font(u32 size) -> Font&;

    /// Start/end a frame.
    void frame_end();
    void frame_start();
};
