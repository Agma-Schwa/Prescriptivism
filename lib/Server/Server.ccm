module;
#include <algorithm>
#include <base/Macros.hh>
#include <chrono>
#include <memory>
#include <pr/Packets.hh>
#include <random>
#include <vector>
export module pr.server;
import pr.tcp;

import base;
import pr.utils;
import pr.packets;
import pr.cards;

export namespace pr::server {
class Server;
class Card;
class Player;
}

namespace pr::server {
using DisconnectReason = packets::sc::Disconnect::Reason;
}

class pr::server::Card {
    LIBBASE_MOVE_ONLY(Card);
    CardType card_type;

public:
    Card(CardType t) : card_type(t) {}
    [[nodiscard]] auto type() const -> CardType { return card_type; }
};

class pr::server::Player {
    LIBBASE_IMMOVABLE(Player);
public:
    /// The connexion for this player, if there is an established
    /// one. This may be unset if the player has (temporarily) left
    /// the game.
    net::TCPConnexion client_connexion;

    /// The player's name.
    std::string name;

    /// The player’s hand
    std::vector<Card> hand;

    /// The player’s word
    std::vector<Card> word;

    /// Create a new player.
    Player(net::TCPConnexion client_connexion, std::string name)
        : client_connexion(std::move(client_connexion)),
          name(std::move(name)) {}

    /// Check if this player is currently connected to the server.
    [[nodiscard]] auto connected() const -> bool {
        return not client_connexion.disconnected();
    }
};

/// Prescriptivism server instance.
class pr::server::Server : net::TCPServerCallbacks {
    LIBBASE_IMMOVABLE(Server);

    struct PendingConnexion {
        net::TCPConnexion conn;
        chr::steady_clock::time_point established;
    };

    /// TCP server that manages client connexions.
    net::TCPServer server;

    /// The list of players. Once a player has been added, they are
    /// typically never removed.
    std::vector<std::unique_ptr<Player>> players;

    /// The current player
    usz current_player = 0;

    /// The random number generator.
    std::mt19937 rng{std::random_device{}()};

    /// List of connexions that have not yet been assigned a player.
    std::vector<PendingConnexion> pending_connexions;

    /// The password of the server.
    std::string password;

    std::vector<Card> deck;
    std::vector<Card> discard{};

public:
    /// Create and start the server.
    Server(u16 port, std::string password);

    /// Disconnect a client.
    void Kick(net::TCPConnexion& client, DisconnectReason reason);

    /// Run the server for ever.
    [[noreturn]] void Run();

#define X(name) void handle(net::TCPConnexion& client, packets::cs::name);
    COMMON_PACKETS(X)
    CS_PACKETS(X)
#undef X

private:
    void Tick();

    void SetUpGame();
    void NextPlayer();

    auto player() -> Player& { return *players[current_player]; }
    bool all_players_connected() {
        return rgs::all_of(players, [](const auto& p) { return p->connected(); });
    }

    bool accept(net::TCPConnexion& connexion) override;
    void receive(net::TCPConnexion& client, net::ReceiveBuffer& buffer) override;
};
