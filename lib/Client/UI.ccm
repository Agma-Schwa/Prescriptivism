module;
#include <base/Assert.hh>
#include <base/Macros.hh>
#include <functional>
#include <limits>
#include <memory>
#include <numeric>
#include <ranges>
#include <SDL3/SDL.h>
export module pr.client.ui;

import base.text;
import pr.cards;
import pr.utils;
import pr.client.render;
import pr.client.render.gl;

export namespace pr::client {
struct Position;
class Element;
class Button;
class Screen;
class TextEdit;
class InputSystem;
class Label;
class Throbber;
class Card;
class Widget;
class CardGroup;

enum class Anchor : u8;
} // namespace pr::client

namespace pr::client {
/// Intermediate widget that consists of a box that wraps some text.
class TextBox;
}

/// An anchor point for positioning elements.
enum class pr::client::Anchor : base::u8 {
    North,
    NorthEast,
    East,
    SouthEast,
    South,
    SouthWest,
    West,
    NorthWest,
    Center,
    Default = SouthWest,
};

/// A position of an element, which may be absolute or relative
/// to its parent element.
struct pr::client::Position {
    static constexpr i32 Centered = std::numeric_limits<i32>::min();

    /// Base position.
    xy base;

    /// Separate adjustment fields since the position may be centered,
    /// in which case adjustments can only be applied when the position
    /// is computed. These are always relative to the base position.
    i16 xadjust{};
    i16 yadjust{};

    /// Anchor of the position.
    Anchor anchor = Anchor::Default;

    constexpr Position() = default;
    constexpr Position(xy base, Anchor a = Anchor::Default) : base(base), anchor(a) {}
    constexpr Position(i32 x, i32 y, Anchor a = Anchor::Default) : base(x, y), anchor(a) {}

    /// Create a position that is centered horizontally or vertically.
    static constexpr auto HCenter(i32 y, Anchor a = Anchor::Default) -> Position { return {Centered, y, a}; }
    static constexpr auto VCenter(i32 x, Anchor a = Anchor::Default) -> Position { return {x, Centered, a}; }
    static constexpr auto Center(Anchor a = Anchor::Default) -> Position { return {Centered, Centered, a}; }

    /// Convert to an absolute position.
    auto absolute(Size screen_size, Size object_size) -> xy;

    /// Anchor the position.
    constexpr auto anchor_to(Anchor a) -> Position& {
        anchor = a;
        return *this;
    }

    /// Offset horizontally.
    constexpr auto hoffset(i32 offset) -> Position& {
        xadjust += std::saturate_cast<i16>(offset);
        return *this;
    }

    /// Convert to a relative position.
    auto relative(AABB parent_box, Size object_size) -> xy;
    auto relative(xy origin, Size parent_size, Size object_size) -> xy;

    /// Offset vertically.
    constexpr auto voffset(i32 offset) -> Position& {
        yadjust += std::saturate_cast<i16>(offset);
        return *this;
    }
};

/// User input handler.
class pr::client::InputSystem {
    struct MouseState {
        xy pos{};
        bool left{};
        bool right{};
        bool middle{};
    };

    struct Event {
        SDL_Keycode key;
        SDL_Keymod mod;
    };

    bool was_selected = false;

public:
    Renderer& renderer;
    std::u32string text_input;
    std::vector<Event> kb_events;
    MouseState mouse;
    bool quit = false;

    InputSystem(Renderer& r) : renderer(r) {}

    void game_loop(std::function<void()> tick);
    void process_events();
    void update_selection(bool is_element_selected);
};

/// The root of the UI element hierarchy.
class pr::client::Element {
    TrivialReadonly(AABB, bounding_box);

protected:
    Element() = default;
    void SetBoundingBox(AABB aabb) { _bounding_box = aabb; }
    void SetBoundingBox(xy origin, Size size) { _bounding_box = {origin, size}; }
    void UpdateBoundingBox(xy origin) { _bounding_box = {origin, _bounding_box.size()}; }
    void UpdateBoundingBox(Size size) { _bounding_box = {_bounding_box.origin(), size}; }

public:
    virtual ~Element() = default;

    /// Draw this element.
    virtual void draw(Renderer& r) = 0;

    /// Recompute bounding box etc.
    virtual void refresh(Renderer&) {}
};

/// Element that is not a screen.
class pr::client::Widget : public Element {
    TrivialReadonly(Element*, parent);

public:
    bool hovered       : 1 = false; ///< Element is being hovered.
    bool selectable    : 1 = false; ///< Element can be selected.
    bool selected      : 1 = false; ///< Element is selected.
    bool visible       : 1 = true;  ///< Element is rendered, ticked, and interactable.
    bool needs_refresh : 1 = false; ///< Element requested a refresh.

    /// Position of the widget.
    Position pos;

protected:
    explicit Widget(Element* parent, Position pos = {})
        : _parent(parent), pos(pos) {}

public:
    /// Event handler for when the mouse is clicked on this element.
    virtual void event_click(InputSystem&) {}

    /// Event handler for when a selected element is given text input.
    virtual void event_input(InputSystem&) {}

    /// Reset properties at the start of a tick.
    void reset_properties() {
        hovered = false;
        selected = false;
    }

    /// Calculate bounding box relative to the parent.
    auto rbox() -> AABB { return {rpos(), bounding_box.size()}; }

    /// Calculate position relative to the parent using our size.
    auto rpos() -> xy {
        return pos.relative(parent->bounding_box, bounding_box.size());
    }
};

/// A screen that displays elements and controls user
/// interaction. A screen is an element mainly so we
/// can set it as the parent of an element.
class pr::client::Screen : public Element {
    LIBBASE_IMMOVABLE(Screen);

    /// List of children.
    std::vector<std::unique_ptr<Widget>> children;

    /// The selected element.
    Widget* selected_element = nullptr;

    /// Previous size so we donâ€™t refresh every frame.
    Size prev_size = {};

protected:
    Screen() = default;

public:
    /// Create an element with the screen as its parent.
    template <std::derived_from<Widget> El, typename... Args>
    auto Create(Args&&... args) -> El& {
        auto el = std::make_unique<El>(this, std::forward<Args>(args)...);
        auto& ref = *el;
        children.push_back(std::move(el));
        return ref;
    }

    /// Code to run to reset a screen when it is entered.
    virtual void on_entered() {}

    /// Render this screen.
    ///
    /// The default renderer renders all UI elements that are part of
    /// this screen.
    void draw(Renderer& r) override;

    /// Refresh all element positions.
    ///
    /// This recomputes the position of each element after the screen
    /// has been resized and before ticking/rendering.
    void refresh(Renderer& r) override;

    /// Tick this screen.
    ///
    /// The default tick handler visits all elements and performs UI
    /// interactions on them; thus, calling this handler is recommended
    /// if you override it.
    virtual void tick(InputSystem& input);

    /// Get all visible elements.
    auto visible() {
        return children | vws::filter([](auto& e) { return e->visible; });
    }
};

/// Label that supports reflowing text automatically.
class pr::client::Label : public Widget {
    Text text;
    bool reflow = false;

public:
    Colour colour = Colour::White;

    explicit Label(Element* parent, Position pos) : Widget(parent, pos) {}
    explicit Label(Element* parent, ShapedText text, Position pos)
        : Widget(parent, pos), text(std::move(text)) {}

    explicit Label(
        Element* parent,
        Position pos,
        FontSize sz,
        TextStyle style,
        TextAlign align,
        bool reflow = true
    ) : Widget(parent, pos),
        text("", sz, align, style),
        reflow(reflow) {}

    explicit Label(
        Element* parent,
        std::string text,
        Position pos,
        FontSize sz = FontSize::Text,
        TextStyle style = TextStyle::Regular,
        TextAlign align = TextAlign::SingleLine,
        bool reflow = true
    ) : Label(parent, pos, sz, style, align, reflow) {
        update_text(std::move(text));
    }

    void draw(Renderer& r) override;
    void font_size(FontSize new_size) { text.font_size = new_size; }
    void refresh(Renderer& r) override;

    void should_reflow(bool should_reflow = true) {
        reflow = should_reflow;
        needs_refresh = true;
    }

    auto size(Renderer& r) -> Size { return text.size(r); }

    void update_text(std::string new_text) {
        text.set(std::move(new_text));
        needs_refresh = true;
    }
};

class pr::client::TextBox : public Widget {
protected:
    ShapedText label;
    ShapedText placeholder;
    i32 padding{};
    i32 min_wd{};
    i32 min_ht{};
    i32 cursor_offs = -1; // Cursor offset from the start of the text; -1 to disable.

    explicit TextBox(
        Element* parent,
        ShapedText label,
        ShapedText placeholder,
        Position pos,
        i32 padding,
        i32 min_wd = 0,
        i32 min_ht = 0
    );

    void UpdateText(ShapedText new_text);
    auto TextPos(const ShapedText& text) -> xy;

public:
    void draw(Renderer& r) override;
    void refresh(Renderer& r) override;
};

class pr::client::Button : public TextBox {
public:
    std::function<void()> on_click{};

    explicit Button(
        Element* parent,
        ShapedText label,
        Position pos,
        i32 padding = 3,
        i32 min_wd = 125,
        i32 min_ht = 0
    ) : TextBox(parent, std::move(label), ShapedText(), pos, padding, min_wd, min_ht) {}

    void event_click(InputSystem&) override {
        if (on_click) on_click();
    }

    void draw(Renderer& r) override;
};

class pr::client::TextEdit : public TextBox {
    struct Selection {
        i32 start;
        i32 end;
    };

    std::u32string text;
    std::vector<ShapedText::Cluster> clusters;
    FontSize size;
    TextStyle style;
    bool dirty = false;
    bool hide_text = false;
    i32 cursor = 0;
    u32 no_blink_ticks = 0; // Used to inhibit blinking during typing.
    Selection sel{};

public:
    TextEdit(
        Element* parent,
        Position pos,
        ShapedText placeholder,
        FontSize size = FontSize::Medium,
        TextStyle style = TextStyle::Regular,
        i32 padding = 3,
        bool hide_text = false,
        i32 min_wd = 250,
        i32 min_ht = 0
    ) : TextBox(parent, ShapedText(), std::move(placeholder), pos, padding, min_wd, min_ht),
        size{size},
        style{style},
        hide_text{hide_text} {
        selectable = true;
    }

    void draw(Renderer& r) override;
    void event_click(InputSystem& input) override;
    void event_input(InputSystem& input) override;
    void set_hide_text(bool hide) {
        hide_text = hide;
        dirty = true;
    }

    auto value() -> std::string { return text::ToUTF8(text); }
    void value(std::u32string new_text) {
        text = std::move(new_text);
        dirty = true;
    }
};

class pr::client::Throbber : public Widget {
    static constexpr f32 R = 20; // Radius of the throbber.

    VertexArrays vao;

public:
    Throbber(Element* parent, Position pos);

    void draw(Renderer& r) override;
};

class pr::client::Card : public Widget {
public:
    enum Scale : u8 {
        OtherPlayer,
        Field,
        Large,
        NumScales
    };

    static constexpr Size CardSize[NumScales] = {Size{60, 90}, Size{120, 180}, Size{240, 360}};

private:
    static constexpr u16 Offset[NumScales] = {1, 2, 4};
    static constexpr FontSize CodeSizes[NumScales] = {FontSize::Text, FontSize::Medium, FontSize::Huge};
    static constexpr FontSize NameSpecialSizes[NumScales] = {FontSize::Small, FontSize::Text, FontSize::Medium};
    static constexpr FontSize MiddleSizes[NumScales] = {FontSize::Medium, FontSize::Huge, FontSize::Title};

    TrivialProperty(CardId, id);
    TrivialProperty(Scale, scale);
    u8 count{};
    bool scale_changed = true; // Set initially so we recalculate everything.
    Label code;
    Label name;
    Label middle;
    Label special;

public:
    Card(Element* parent, Position pos);

    void draw(Renderer& r) override;
    void refresh(Renderer&) override;
};

class pr::client::CardGroup : public Widget {
    using Scale = Card::Scale;
    using Cards = std::vector<std::unique_ptr<Card>>;

    /// The scale that is set for all cards in the group.
    TrivialProperty(Scale, scale);

    /// The maximum width of the entire group. Ignored if 0.
    TrivialProperty(i32, max_width);

    /// Whether the group should scale to the next available
    /// card size if possible.
    TrivialProperty(bool, autoscale);


public:
    static constexpr i32 CardGaps[Scale::NumScales] { 5, 10, 20 };

    /// The cards in the group.
    Cards cards;

    CardGroup(Element* parent, Position pos) : CardGroup(parent, pos, {}) {}
    CardGroup(Element* parent, Position pos, std::vector<CardId> cards)
        : Widget(parent, pos),
          _scale{Scale::Field},
          _max_width{0},
          _autoscale{false} {
        for (auto c : cards) add(c);
    }

    void add(CardId c);
    void draw(Renderer& r) override;
    void refresh(Renderer&) override;
};

template <>
struct std::formatter<pr::client::Position> : std::formatter<std::string> {
    template <typename FormatContext>
    auto format(pr::client::Position pos, FormatContext& ctx) const {
        return std::formatter<std::string>::format(
            std::format(
                "Position(base={}, xadjust={}, yadjust={}, anchor={})",
                pos.base,
                pos.xadjust,
                pos.yadjust,
                std::to_underlying(pos.anchor)
            ),
            ctx
        );
    }
};
