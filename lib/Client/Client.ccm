module;
#include <base/Assert.hh>
#include <base/Macros.hh>
#include <functional>
#include <memory>
#include <pr/Packets.hh>
#include <thread>
export module pr.client;

import pr.utils;
import pr.packets;
import pr.client.ui;
import pr.client.render;
import pr.client.render.gl;
import pr.tcp;

export namespace pr::client {
class Client;
}

namespace pr::client {
class MenuScreen;
class ErrorScreen;
class ConnexionScreen;
class GameScreen;
}

/// Main menu of the game.
class pr::client::MenuScreen : public Screen {
public:
    MenuScreen(Client& c);
};

/// Screen that displays an error.
class pr::client::ErrorScreen : public Screen {
    /// Text to display.
    Label* msg;

    /// The screen to return to after this one is closed.
    Screen* return_screen = nullptr;

public:
    ErrorScreen(Client& c);

    /// Set the text to display and the screen to return to.
    void enter(Client& c, std::string t, Screen& return_to);
};

/// Screen that is displayed while we connect to a server.
///
/// This screen has all the connexion logic.
class pr::client::ConnexionScreen : public Screen {
    enum class State : u32 {
        Entered,    ///< The screen has just been entered.
        Connecting, ///< We are trying to connect in a separate thread.
        Aborted,    ///< The 'Cancel' button was pressed.
    };

    Client& client;
    State st;
    std::string address, username, password;
    Thread<net::TCPConnexion> connexion_thread;

public:
    ConnexionScreen(Client& c);

    void enter(std::string address, std::string username, std::string password);
    void tick(InputSystem& input) override;
    void set_address(std::string addr);

private:
    auto connexion_thread_main(std::string address, std::stop_token st) -> Result<net::TCPConnexion>;
};

/// This screen renders the actual game.
class pr::client::GameScreen : public Screen {
    Client& client;
    LateInit<net::TCPConnexion> server_connexion;

public:
    explicit GameScreen(Client& c);
    void enter(net::TCPConnexion conn);
    void tick(InputSystem& input) override;
    void tick_networking();

#define X(name) void handle(packets::sc::name);
    COMMON_PACKETS(X)
    SC_PACKETS(X)
#undef X
};

class pr::client::Client {
    LIBBASE_IMMOVABLE(Client);

public:
    /// The main renderer.
    Renderer renderer;

    /// The user input handler.
    InputSystem input_system{renderer};

    /// Screens.
    MenuScreen menu_screen{*this};
    ConnexionScreen connexion_screen{*this};
    ErrorScreen error_screen{*this};
    GameScreen game_screen{*this};

private:
    Screen* current_screen;

    /// TCP Connexion to the server.
    std::optional<net::TCPConnexion> server_connexion;

public:
    /// Create a new client.
    explicit Client();

    /// Enter a screen.
    void enter_screen(Screen& s);

    /// Run the client for ever.
    void run();

    /// Show an error to the user.
    void show_error(std::string error, Screen& return_to);
};
