module;
#include <base/Macros.hh>
#include <memory>
export module pr.client;
import pr.client.render;

export namespace pr::client {
class Client;
}

namespace pr::client {
class Screen;
class MenuScreen;
}

class pr::client::Screen {
    LIBBASE_IMMOVABLE(Screen);

protected:
    Screen() = default;

public:
    virtual ~Screen() = default;

    /// Render this screen.
    virtual void render(Renderer& r) = 0;
};

class pr::client::MenuScreen : public Screen {
    ShapedText title;

public:
    MenuScreen(Renderer& r);

    void render(Renderer& r) override;
};

class pr::client::Client {
    LIBBASE_IMMOVABLE(Client);

public:
    Renderer renderer;

private:
    std::unique_ptr<MenuScreen> menu_screen;
    Screen* current_screen;

public:
    /// Create a new client.
    explicit Client();

    /// Run the client for ever.
    void Run();
};
