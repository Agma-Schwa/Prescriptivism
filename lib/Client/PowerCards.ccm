module;
#include <array>
#include <string_view>
export module pr.client.powercards;

import pr.cards;
import pr.utils;
import pr.client.render.gl;

export namespace pr::client {
struct PowerCardData;
}

struct pr::client::PowerCardData {
    /// Basic rules text.
    std::string_view rules;

    /// Extended tooltip with the complete rules text; this
    /// is shown if the user holds down some key (e.g. shift).
    std::string_view extended_rules;

    /// Path to the image.
    std::string_view image_path;

    /// Cached image texture.
    LateInit<DrawableTexture> image{};

    explicit PowerCardData(
        std::string_view image_path,
        std::string_view rules,
        std::string_view extended_rules
    ) : rules(rules), extended_rules(extended_rules), image_path(image_path) {}
};

namespace pr::client::power_card_database {
using enum CardId;

#define Entry(x, ...) [+x - +$$PowersStart] = PowerCardData(#x, __VA_ARGS__)

const PowerCardData Database[+$$PowersEnd - +$$PowersStart + 1]{
    Entry(
        P_Assimilation,
        "",
        ""
    ),

    Entry(
        P_Babel,
        "",
        ""
    ),

    Entry(
        P_Brasil,
        "",
        ""
    ),

    Entry(
        P_Campbell,
        "",
        ""
    ),

    Entry(
        P_Chomsky,
        "",
        ""
    ),

    Entry(
        P_Darija,
        "",
        ""
    ),

    Entry(
        P_Descriptivism,
        "",
        ""
    ),

    Entry(
        P_Dissimilation,
        "",
        ""
    ),

    Entry(
        P_Elision,
        "",
        ""
    ),

    Entry(
        P_Epenthesis,
        "",
        ""
    ),

    Entry(
        P_GVS,
        "",
        ""
    ),

    Entry(
        P_Grimm,
        "",
        ""
    ),

    Entry(
        P_Gvprtskvni,
        "",
        ""
    ),

    Entry(
        P_Heffer,
        "",
        ""
    ),

    Entry(
        P_LinguaFranca,
        "",
        ""
    ),

    Entry(
        P_Nope,
        "",
        ""
    ),

    Entry(
        P_Owl,
        "",
        ""
    ),

    Entry(
        P_Pinker,
        "",
        ""
    ),

    Entry(
        P_ProtoWorld,
        "",
        ""
    ),

    Entry(
        P_REA,
        "",
        ""
    ),

    Entry(
        P_Reconstruction,
        "",
        ""
    ),

    Entry(
        P_Regression,
        "",
        ""
    ),

    Entry(
        P_Revival,
        "",
        ""
    ),

    Entry(
        P_Rosetta,
        "",
        ""
    ),

    Entry(
        P_Schleicher,
        "",
        ""
    ),

    Entry(
        P_Schleyer,
        "",
        ""
    ),

    Entry(
        P_SpellingReform,
        "Lock one of your sounds, or combine with a sound card to break "
        "a lock on an adjacent sound",
        ""
    ),

    Entry(
        P_Substratum,
        "",
        ""
    ),

    Entry(
        P_Superstratum,
        "",
        ""
    ),

    Entry(
        P_Urheimat,
        "",
        ""
    ),

    Entry(
        P_Vajda,
        "",
        ""
    ),

    Entry(
        P_Vernacular,
        "",
        ""
    ),

    Entry(
        P_Whorf,
        "",
        ""
    ),

    Entry(
        P_Zamnenhoff,
        "",
        ""
    ),
};

export struct DatabaseImpl {
    auto operator[](CardId id) -> const PowerCardData& { return Database[+id - +$$PowersStart]; }
    void Init();
} PowerCardDatabase;

void DatabaseImpl::Init() {
    for (auto& card : Database) {
        card.image.init(DrawableTexture::LoadFromFile(card.image_path));
    }
}
} // namespace pr::client::power_card_database


namespace pr::client {
export using power_card_database::PowerCardDatabase;
}
